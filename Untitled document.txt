Q1. What is a database? Differentiate between SQL and NoSQL databases.
A database is an organized collection of structured information, or data, typically stored electronically in a computer system. A database is usually controlled by a database management system .


SQL (Structured Query Language) and NoSQL (Not only SQL) are two different types of database management systems that differ in their data models, query languages, and underlying design principles.
SQL Databases:
1. Data Model: SQL databases follow a relational data model, where data is organized into tables with predefined schemas. Tables consist of rows (records) and columns (fields), and relationships between tables are established using keys.
2. Query Language: SQL databases use SQL as the standardized query language for performing operations such as data insertion, retrieval, modification, and deletion. SQL provides a declarative approach to querying data, allowing users to specify what data they want to retrieve without specifying how to retrieve it.
3. Schema: SQL databases have a rigid, predefined schema that defines the structure of the data. Changes to the schema often require careful planning and potentially impact the existing data.
4. Scalability: SQL databases typically scale vertically by increasing hardware resources like CPU, RAM, or storage capacity. They are well-suited for complex queries and transactions with ACID (Atomicity, Consistency, Isolation, Durability) properties, making them suitable for applications with complex relationships and structured data.
NoSQL Databases:
1. Data Model: NoSQL databases employ various data models, such as key-value, document, columnar, and graph. These models provide flexibility in storing unstructured and semi-structured data.
2. Query Language: NoSQL databases use different query languages, which can be specific to each database or based on JSON-like syntax. Some NoSQL databases offer SQL-like query interfaces as well.
3. Schema: NoSQL databases are schema-less or have flexible schemas, allowing for dynamic changes to the structure of the data without impacting existing records. This flexibility enables agile development and easier handling of evolving data requirements.
4. Scalability: NoSQL databases are designed to scale horizontally by adding more servers to the database cluster. They excel at handling large-scale data with high read/write throughput and are often used in distributed environments.
The choice between SQL and NoSQL databases depends on the specific requirements of an application. SQL databases are generally suitable for applications with structured data and complex relationships, while NoSQL databases are more appropriate for handling unstructured or semi-structured data, massive scalability, and high-performance requirements.


Q2. What is DDL? Explain why CREATE, DROP, ALTER, and TRUNCATE are used with an example.
DDL stands for Data Definition Language. It is a subset of SQL (Structured Query Language) used to define and manage the structure of a database. DDL statements are responsible for creating, modifying, and deleting database objects such as tables, indexes, views, and constraints.
CREATE: The CREATE statement is used to create new database objects.
For Example:
CREATE TABLE Employees ( EmployeeID INT, Name VARCHAR(50), Department VARCHAR(50) );
DROP: The DROP statement is used to remove existing database objects. It permanently deletes the specified object and all its associated data.
For Example:
DROP TABLE Employees;
ALTER: The ALTER statement is used to modify the structure of existing database objects. It allows you to add, modify, or delete columns, constraints, and other attributes.
For Example:
ALTER TABLE Employees ADD Salary DECIMAL(10,2);
TRUNCATE: The TRUNCATE statement is used to remove all data from a table while keeping its structure intact. Unlike the DROP statement, TRUNCATE allows you to retain the table itself. It is commonly used when you want to delete all rows in a table efficiently.
For Example:
TRUNCATE TABLE Employees;
These DDL statements provide essential functionality for managing the structure of a database, allowing you to create, modify, and delete tables and other database objects as needed.


Q3. What is DML? Explain INSERT, UPDATE, and DELETE with an example.


DML stands for Data Manipulation Language. It is a subset of SQL (Structured Query Language) used to manipulate and manage data within a database. DML statements are responsible for performing actions such as inserting, updating, and deleting data in database tables.
INSERT: The INSERT statement is used to add new data into a table. It allows you to specify the columns and values to be inserted.
For Example:
INSERT INTO Employees (EmployeeID, Name, Department) VALUES (1, 'Rachit', 'Student');
UPDATE: The UPDATE statement is used to modify existing data in a table. It allows you to change the values of specific columns based on certain conditions.
For Example:
UPDATE Employees SET Department = 'Coding' WHERE EmployeeID = 1;
DELETE: The DELETE statement is used to remove one or more rows from a table. It allows you to specify conditions to identify the rows to be deleted.
For Example:
DELETE FROM Employees WHERE Department = 'Finance';


Q5. Explain Primary Key and Foreign Key.
Primary Key: A primary key is a column or a set of columns in a database table that uniquely identifies each record (row) in the table. It serves as a unique identifier for a specific record and ensures the integrity and uniqueness of the data within the table. Here are some key characteristics of a primary key:
1. Uniqueness: Each value in the primary key column(s) must be unique. No two records in the table can have the same primary key value.
2. Non-nullability: A primary key column cannot have a null (empty) value. It must always contain a valid value.
3. Irreducibility: The primary key should be minimal and irreducible, meaning it should consist of the fewest possible columns required to uniquely identify a record.
A primary key can be composed of a single column or a combination of multiple columns (composite primary key) if a single column is not sufficient to ensure uniqueness. Primary keys are commonly used in database design to establish relationships with other tables using foreign keys.
Foreign Key: A foreign key is a column or a set of columns in a database table that refers to the primary key of another table. It establishes a relationship between two tables, known as the parent table (referenced table) and the child table (referring table). Here are some key characteristics of a foreign key:
1. Referential Integrity: A foreign key ensures referential integrity, which means that the values in the foreign key column(s) of the child table must match the values in the primary key column(s) of the parent table. It enforces the integrity and consistency of data across related tables.
2. Relationship Establishment: The foreign key represents a relationship between tables by creating a link from the child table to the parent table.
3. Optional or Mandatory: A foreign key can be optional (nullable) or mandatory (non-nullable) depending on whether it allows null values or not. An optional foreign key can have a null value, indicating that there is no corresponding record in the parent table.
By using foreign keys, you can establish relationships and enforce referential integrity between tables. These relationships facilitate data retrieval, data consistency, and data integrity in the database.
Q6. Write a python code to connect MySQL to python. Explain the cursor() and execute() method.
Code for connection:
import mysql.connector
mydb = mysql.connector.connect
(
host="localhost",
user="abc",
password="password"
)
mycursor = mydb.cursor()
mycursor.execute("CREATE DATABASE if not exists test1")
mydb.close()
cursor(): This is used to create a cursor object within the database connection. A cursor represents the control structure that allows you to access and manipulate the database records.It provides methods for executing SQL statements, fetching query results, and managing transactions.
execute(): This is used to execute an SQL statement or query using the cursor object. It takes an SQL query string as a parameter and sends the query to the database for execution. The method returns a result containing the data retrieved from the database.
Q7. Give the order of execution of SQL clauses in an SQL query.
The order of execution of SQL clauses in a typical SQL query is as follows:
1. FROM clause: The FROM clause specifies the tables from which the data will be retrieved. It is the first clause that is processed in a query.
2. WHERE clause: The WHERE clause is used to filter the data based on specific conditions. It is evaluated after the FROM clause, and only the rows that meet the specified conditions are included in the result set.
3. GROUP BY clause: The GROUP BY clause is used to group the rows in the result set based on one or more columns. It is processed after the WHERE clause, and the data is grouped accordingly.
4. HAVING clause: The HAVING clause is used to filter the grouped data based on specific conditions. It is similar to the WHERE clause but operates on the grouped data. It is evaluated after the GROUP BY clause, and only the groups that meet the specified conditions are included in the result set.
5. SELECT clause: The SELECT clause is used to specify the columns that will be included in the result set. It is processed after the previous clauses, and the data is selected accordingly.
6. ORDER BY clause: The ORDER BY clause is used to sort the result set based on one or more columns. It is processed after the SELECT clause, and the data is ordered accordingly.
7. LIMIT/OFFSET clause: The LIMIT/OFFSET clause is used to restrict the number of rows returned by the query or to skip a certain number of rows. It is processed after the ORDER BY clause, and the result set is limited or offset accordingly.